/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.code.rpc.api.sync;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** 1、查询账户余量信息:请求:多个卡号支持 */
@org.apache.avro.specific.AvroGenerated
public class AccountLeftInfoRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3975938681360794939L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AccountLeftInfoRequest\",\"namespace\":\"com.code.rpc.api.sync\",\"doc\":\"1、查询账户余量信息:请求:多个卡号支持\",\"fields\":[{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"doc\":\"applicationId:应用ID;originHost:发送方的hostname或者ip地址;requestId:请求Id\",\"fields\":[{\"name\":\"applicationId\",\"type\":\"string\"},{\"name\":\"originHost\",\"type\":\"string\"},{\"name\":\"requestId\",\"type\":\"string\"}]}},{\"name\":\"conditions\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LeftQueryRequest\",\"doc\":\"查询账户余量信息：请求：属性\",\"fields\":[{\"name\":\"oprCode\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"name\":\"queryMonth\",\"type\":[\"string\"]}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public com.code.rpc.api.sync.Header header;
  @Deprecated public java.util.List<com.code.rpc.api.sync.LeftQueryRequest> conditions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AccountLeftInfoRequest() {}

  /**
   * All-args constructor.
   * @param header The new value for header
   * @param conditions The new value for conditions
   */
  public AccountLeftInfoRequest(com.code.rpc.api.sync.Header header, java.util.List<com.code.rpc.api.sync.LeftQueryRequest> conditions) {
    this.header = header;
    this.conditions = conditions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return header;
    case 1: return conditions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: header = (com.code.rpc.api.sync.Header)value$; break;
    case 1: conditions = (java.util.List<com.code.rpc.api.sync.LeftQueryRequest>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public com.code.rpc.api.sync.Header getHeader() {
    return header;
  }

  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(com.code.rpc.api.sync.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'conditions' field.
   * @return The value of the 'conditions' field.
   */
  public java.util.List<com.code.rpc.api.sync.LeftQueryRequest> getConditions() {
    return conditions;
  }

  /**
   * Sets the value of the 'conditions' field.
   * @param value the value to set.
   */
  public void setConditions(java.util.List<com.code.rpc.api.sync.LeftQueryRequest> value) {
    this.conditions = value;
  }

  /**
   * Creates a new AccountLeftInfoRequest RecordBuilder.
   * @return A new AccountLeftInfoRequest RecordBuilder
   */
  public static com.code.rpc.api.sync.AccountLeftInfoRequest.Builder newBuilder() {
    return new com.code.rpc.api.sync.AccountLeftInfoRequest.Builder();
  }

  /**
   * Creates a new AccountLeftInfoRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AccountLeftInfoRequest RecordBuilder
   */
  public static com.code.rpc.api.sync.AccountLeftInfoRequest.Builder newBuilder(com.code.rpc.api.sync.AccountLeftInfoRequest.Builder other) {
    return new com.code.rpc.api.sync.AccountLeftInfoRequest.Builder(other);
  }

  /**
   * Creates a new AccountLeftInfoRequest RecordBuilder by copying an existing AccountLeftInfoRequest instance.
   * @param other The existing instance to copy.
   * @return A new AccountLeftInfoRequest RecordBuilder
   */
  public static com.code.rpc.api.sync.AccountLeftInfoRequest.Builder newBuilder(com.code.rpc.api.sync.AccountLeftInfoRequest other) {
    return new com.code.rpc.api.sync.AccountLeftInfoRequest.Builder(other);
  }

  /**
   * RecordBuilder for AccountLeftInfoRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AccountLeftInfoRequest>
    implements org.apache.avro.data.RecordBuilder<AccountLeftInfoRequest> {

    private com.code.rpc.api.sync.Header header;
    private com.code.rpc.api.sync.Header.Builder headerBuilder;
    private java.util.List<com.code.rpc.api.sync.LeftQueryRequest> conditions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.code.rpc.api.sync.AccountLeftInfoRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = com.code.rpc.api.sync.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[1], other.conditions)) {
        this.conditions = data().deepCopy(fields()[1].schema(), other.conditions);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AccountLeftInfoRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.code.rpc.api.sync.AccountLeftInfoRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.header)) {
        this.header = data().deepCopy(fields()[0].schema(), other.header);
        fieldSetFlags()[0] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[1], other.conditions)) {
        this.conditions = data().deepCopy(fields()[1].schema(), other.conditions);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public com.code.rpc.api.sync.Header getHeader() {
      return header;
    }

    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.AccountLeftInfoRequest.Builder setHeader(com.code.rpc.api.sync.Header value) {
      validate(fields()[0], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.code.rpc.api.sync.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(com.code.rpc.api.sync.Header.newBuilder(header));
        } else {
          setHeaderBuilder(com.code.rpc.api.sync.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.code.rpc.api.sync.AccountLeftInfoRequest.Builder setHeaderBuilder(com.code.rpc.api.sync.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.AccountLeftInfoRequest.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'conditions' field.
      * @return The value.
      */
    public java.util.List<com.code.rpc.api.sync.LeftQueryRequest> getConditions() {
      return conditions;
    }

    /**
      * Sets the value of the 'conditions' field.
      * @param value The value of 'conditions'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.AccountLeftInfoRequest.Builder setConditions(java.util.List<com.code.rpc.api.sync.LeftQueryRequest> value) {
      validate(fields()[1], value);
      this.conditions = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'conditions' field has been set.
      * @return True if the 'conditions' field has been set, false otherwise.
      */
    public boolean hasConditions() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'conditions' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.AccountLeftInfoRequest.Builder clearConditions() {
      conditions = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    public AccountLeftInfoRequest build() {
      try {
        AccountLeftInfoRequest record = new AccountLeftInfoRequest();
        if (headerBuilder != null) {
          record.header = this.headerBuilder.build();
        } else {
          record.header = fieldSetFlags()[0] ? this.header : (com.code.rpc.api.sync.Header) defaultValue(fields()[0]);
        }
        record.conditions = fieldSetFlags()[1] ? this.conditions : (java.util.List<com.code.rpc.api.sync.LeftQueryRequest>) defaultValue(fields()[1]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
