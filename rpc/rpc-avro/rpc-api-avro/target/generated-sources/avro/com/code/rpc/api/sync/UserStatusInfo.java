/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.code.rpc.api.sync;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** 用户状态查询响应  */
@org.apache.avro.specific.AvroGenerated
public class UserStatusInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3834445109970630906L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"UserStatusInfo\",\"namespace\":\"com.code.rpc.api.sync\",\"doc\":\"用户状态查询响应 \",\"fields\":[{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"gprs\",\"type\":\"string\"},{\"name\":\"voice\",\"type\":\"string\"},{\"name\":\"sms\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence phone;
  @Deprecated public java.lang.CharSequence gprs;
  @Deprecated public java.lang.CharSequence voice;
  @Deprecated public java.lang.CharSequence sms;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public UserStatusInfo() {}

  /**
   * All-args constructor.
   * @param phone The new value for phone
   * @param gprs The new value for gprs
   * @param voice The new value for voice
   * @param sms The new value for sms
   */
  public UserStatusInfo(java.lang.CharSequence phone, java.lang.CharSequence gprs, java.lang.CharSequence voice, java.lang.CharSequence sms) {
    this.phone = phone;
    this.gprs = gprs;
    this.voice = voice;
    this.sms = sms;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return phone;
    case 1: return gprs;
    case 2: return voice;
    case 3: return sms;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: phone = (java.lang.CharSequence)value$; break;
    case 1: gprs = (java.lang.CharSequence)value$; break;
    case 2: voice = (java.lang.CharSequence)value$; break;
    case 3: sms = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'phone' field.
   * @return The value of the 'phone' field.
   */
  public java.lang.CharSequence getPhone() {
    return phone;
  }

  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(java.lang.CharSequence value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'gprs' field.
   * @return The value of the 'gprs' field.
   */
  public java.lang.CharSequence getGprs() {
    return gprs;
  }

  /**
   * Sets the value of the 'gprs' field.
   * @param value the value to set.
   */
  public void setGprs(java.lang.CharSequence value) {
    this.gprs = value;
  }

  /**
   * Gets the value of the 'voice' field.
   * @return The value of the 'voice' field.
   */
  public java.lang.CharSequence getVoice() {
    return voice;
  }

  /**
   * Sets the value of the 'voice' field.
   * @param value the value to set.
   */
  public void setVoice(java.lang.CharSequence value) {
    this.voice = value;
  }

  /**
   * Gets the value of the 'sms' field.
   * @return The value of the 'sms' field.
   */
  public java.lang.CharSequence getSms() {
    return sms;
  }

  /**
   * Sets the value of the 'sms' field.
   * @param value the value to set.
   */
  public void setSms(java.lang.CharSequence value) {
    this.sms = value;
  }

  /**
   * Creates a new UserStatusInfo RecordBuilder.
   * @return A new UserStatusInfo RecordBuilder
   */
  public static com.code.rpc.api.sync.UserStatusInfo.Builder newBuilder() {
    return new com.code.rpc.api.sync.UserStatusInfo.Builder();
  }

  /**
   * Creates a new UserStatusInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new UserStatusInfo RecordBuilder
   */
  public static com.code.rpc.api.sync.UserStatusInfo.Builder newBuilder(com.code.rpc.api.sync.UserStatusInfo.Builder other) {
    return new com.code.rpc.api.sync.UserStatusInfo.Builder(other);
  }

  /**
   * Creates a new UserStatusInfo RecordBuilder by copying an existing UserStatusInfo instance.
   * @param other The existing instance to copy.
   * @return A new UserStatusInfo RecordBuilder
   */
  public static com.code.rpc.api.sync.UserStatusInfo.Builder newBuilder(com.code.rpc.api.sync.UserStatusInfo other) {
    return new com.code.rpc.api.sync.UserStatusInfo.Builder(other);
  }

  /**
   * RecordBuilder for UserStatusInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<UserStatusInfo>
    implements org.apache.avro.data.RecordBuilder<UserStatusInfo> {

    private java.lang.CharSequence phone;
    private java.lang.CharSequence gprs;
    private java.lang.CharSequence voice;
    private java.lang.CharSequence sms;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.code.rpc.api.sync.UserStatusInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.phone)) {
        this.phone = data().deepCopy(fields()[0].schema(), other.phone);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gprs)) {
        this.gprs = data().deepCopy(fields()[1].schema(), other.gprs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.voice)) {
        this.voice = data().deepCopy(fields()[2].schema(), other.voice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sms)) {
        this.sms = data().deepCopy(fields()[3].schema(), other.sms);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing UserStatusInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.code.rpc.api.sync.UserStatusInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.phone)) {
        this.phone = data().deepCopy(fields()[0].schema(), other.phone);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.gprs)) {
        this.gprs = data().deepCopy(fields()[1].schema(), other.gprs);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.voice)) {
        this.voice = data().deepCopy(fields()[2].schema(), other.voice);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sms)) {
        this.sms = data().deepCopy(fields()[3].schema(), other.sms);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'phone' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhone() {
      return phone;
    }

    /**
      * Sets the value of the 'phone' field.
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.UserStatusInfo.Builder setPhone(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.phone = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'phone' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.UserStatusInfo.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'gprs' field.
      * @return The value.
      */
    public java.lang.CharSequence getGprs() {
      return gprs;
    }

    /**
      * Sets the value of the 'gprs' field.
      * @param value The value of 'gprs'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.UserStatusInfo.Builder setGprs(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.gprs = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'gprs' field has been set.
      * @return True if the 'gprs' field has been set, false otherwise.
      */
    public boolean hasGprs() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'gprs' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.UserStatusInfo.Builder clearGprs() {
      gprs = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'voice' field.
      * @return The value.
      */
    public java.lang.CharSequence getVoice() {
      return voice;
    }

    /**
      * Sets the value of the 'voice' field.
      * @param value The value of 'voice'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.UserStatusInfo.Builder setVoice(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.voice = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'voice' field has been set.
      * @return True if the 'voice' field has been set, false otherwise.
      */
    public boolean hasVoice() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'voice' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.UserStatusInfo.Builder clearVoice() {
      voice = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'sms' field.
      * @return The value.
      */
    public java.lang.CharSequence getSms() {
      return sms;
    }

    /**
      * Sets the value of the 'sms' field.
      * @param value The value of 'sms'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.UserStatusInfo.Builder setSms(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.sms = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'sms' field has been set.
      * @return True if the 'sms' field has been set, false otherwise.
      */
    public boolean hasSms() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'sms' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.UserStatusInfo.Builder clearSms() {
      sms = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public UserStatusInfo build() {
      try {
        UserStatusInfo record = new UserStatusInfo();
        record.phone = fieldSetFlags()[0] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.gprs = fieldSetFlags()[1] ? this.gprs : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.voice = fieldSetFlags()[2] ? this.voice : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.sms = fieldSetFlags()[3] ? this.sms : (java.lang.CharSequence) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
