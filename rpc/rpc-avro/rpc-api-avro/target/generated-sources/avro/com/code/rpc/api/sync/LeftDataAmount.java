/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.code.rpc.api.sync;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** 查询余量信息应答-属性-流量信息 */
@org.apache.avro.specific.AvroGenerated
public class LeftDataAmount extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6385017877249302059L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LeftDataAmount\",\"namespace\":\"com.code.rpc.api.sync\",\"doc\":\"查询余量信息应答-属性-流量信息\",\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"prodInstId\",\"type\":\"string\"},{\"name\":\"dataTotal\",\"type\":\"string\"},{\"name\":\"dataAmount\",\"type\":\"string\"},{\"name\":\"setAmount\",\"type\":\"string\"},{\"name\":\"startTime\",\"type\":\"string\"},{\"name\":\"endTime\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public java.lang.CharSequence prodInstId;
  @Deprecated public java.lang.CharSequence dataTotal;
  @Deprecated public java.lang.CharSequence dataAmount;
  @Deprecated public java.lang.CharSequence setAmount;
  @Deprecated public java.lang.CharSequence startTime;
  @Deprecated public java.lang.CharSequence endTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LeftDataAmount() {}

  /**
   * All-args constructor.
   * @param type The new value for type
   * @param prodInstId The new value for prodInstId
   * @param dataTotal The new value for dataTotal
   * @param dataAmount The new value for dataAmount
   * @param setAmount The new value for setAmount
   * @param startTime The new value for startTime
   * @param endTime The new value for endTime
   */
  public LeftDataAmount(java.lang.CharSequence type, java.lang.CharSequence prodInstId, java.lang.CharSequence dataTotal, java.lang.CharSequence dataAmount, java.lang.CharSequence setAmount, java.lang.CharSequence startTime, java.lang.CharSequence endTime) {
    this.type = type;
    this.prodInstId = prodInstId;
    this.dataTotal = dataTotal;
    this.dataAmount = dataAmount;
    this.setAmount = setAmount;
    this.startTime = startTime;
    this.endTime = endTime;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return type;
    case 1: return prodInstId;
    case 2: return dataTotal;
    case 3: return dataAmount;
    case 4: return setAmount;
    case 5: return startTime;
    case 6: return endTime;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: type = (java.lang.CharSequence)value$; break;
    case 1: prodInstId = (java.lang.CharSequence)value$; break;
    case 2: dataTotal = (java.lang.CharSequence)value$; break;
    case 3: dataAmount = (java.lang.CharSequence)value$; break;
    case 4: setAmount = (java.lang.CharSequence)value$; break;
    case 5: startTime = (java.lang.CharSequence)value$; break;
    case 6: endTime = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'prodInstId' field.
   * @return The value of the 'prodInstId' field.
   */
  public java.lang.CharSequence getProdInstId() {
    return prodInstId;
  }

  /**
   * Sets the value of the 'prodInstId' field.
   * @param value the value to set.
   */
  public void setProdInstId(java.lang.CharSequence value) {
    this.prodInstId = value;
  }

  /**
   * Gets the value of the 'dataTotal' field.
   * @return The value of the 'dataTotal' field.
   */
  public java.lang.CharSequence getDataTotal() {
    return dataTotal;
  }

  /**
   * Sets the value of the 'dataTotal' field.
   * @param value the value to set.
   */
  public void setDataTotal(java.lang.CharSequence value) {
    this.dataTotal = value;
  }

  /**
   * Gets the value of the 'dataAmount' field.
   * @return The value of the 'dataAmount' field.
   */
  public java.lang.CharSequence getDataAmount() {
    return dataAmount;
  }

  /**
   * Sets the value of the 'dataAmount' field.
   * @param value the value to set.
   */
  public void setDataAmount(java.lang.CharSequence value) {
    this.dataAmount = value;
  }

  /**
   * Gets the value of the 'setAmount' field.
   * @return The value of the 'setAmount' field.
   */
  public java.lang.CharSequence getSetAmount() {
    return setAmount;
  }

  /**
   * Sets the value of the 'setAmount' field.
   * @param value the value to set.
   */
  public void setSetAmount(java.lang.CharSequence value) {
    this.setAmount = value;
  }

  /**
   * Gets the value of the 'startTime' field.
   * @return The value of the 'startTime' field.
   */
  public java.lang.CharSequence getStartTime() {
    return startTime;
  }

  /**
   * Sets the value of the 'startTime' field.
   * @param value the value to set.
   */
  public void setStartTime(java.lang.CharSequence value) {
    this.startTime = value;
  }

  /**
   * Gets the value of the 'endTime' field.
   * @return The value of the 'endTime' field.
   */
  public java.lang.CharSequence getEndTime() {
    return endTime;
  }

  /**
   * Sets the value of the 'endTime' field.
   * @param value the value to set.
   */
  public void setEndTime(java.lang.CharSequence value) {
    this.endTime = value;
  }

  /**
   * Creates a new LeftDataAmount RecordBuilder.
   * @return A new LeftDataAmount RecordBuilder
   */
  public static com.code.rpc.api.sync.LeftDataAmount.Builder newBuilder() {
    return new com.code.rpc.api.sync.LeftDataAmount.Builder();
  }

  /**
   * Creates a new LeftDataAmount RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LeftDataAmount RecordBuilder
   */
  public static com.code.rpc.api.sync.LeftDataAmount.Builder newBuilder(com.code.rpc.api.sync.LeftDataAmount.Builder other) {
    return new com.code.rpc.api.sync.LeftDataAmount.Builder(other);
  }

  /**
   * Creates a new LeftDataAmount RecordBuilder by copying an existing LeftDataAmount instance.
   * @param other The existing instance to copy.
   * @return A new LeftDataAmount RecordBuilder
   */
  public static com.code.rpc.api.sync.LeftDataAmount.Builder newBuilder(com.code.rpc.api.sync.LeftDataAmount other) {
    return new com.code.rpc.api.sync.LeftDataAmount.Builder(other);
  }

  /**
   * RecordBuilder for LeftDataAmount instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LeftDataAmount>
    implements org.apache.avro.data.RecordBuilder<LeftDataAmount> {

    private java.lang.CharSequence type;
    private java.lang.CharSequence prodInstId;
    private java.lang.CharSequence dataTotal;
    private java.lang.CharSequence dataAmount;
    private java.lang.CharSequence setAmount;
    private java.lang.CharSequence startTime;
    private java.lang.CharSequence endTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.code.rpc.api.sync.LeftDataAmount.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.prodInstId)) {
        this.prodInstId = data().deepCopy(fields()[1].schema(), other.prodInstId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataTotal)) {
        this.dataTotal = data().deepCopy(fields()[2].schema(), other.dataTotal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataAmount)) {
        this.dataAmount = data().deepCopy(fields()[3].schema(), other.dataAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.setAmount)) {
        this.setAmount = data().deepCopy(fields()[4].schema(), other.setAmount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startTime)) {
        this.startTime = data().deepCopy(fields()[5].schema(), other.startTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.endTime)) {
        this.endTime = data().deepCopy(fields()[6].schema(), other.endTime);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LeftDataAmount instance
     * @param other The existing instance to copy.
     */
    private Builder(com.code.rpc.api.sync.LeftDataAmount other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.type)) {
        this.type = data().deepCopy(fields()[0].schema(), other.type);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.prodInstId)) {
        this.prodInstId = data().deepCopy(fields()[1].schema(), other.prodInstId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dataTotal)) {
        this.dataTotal = data().deepCopy(fields()[2].schema(), other.dataTotal);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataAmount)) {
        this.dataAmount = data().deepCopy(fields()[3].schema(), other.dataAmount);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.setAmount)) {
        this.setAmount = data().deepCopy(fields()[4].schema(), other.setAmount);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.startTime)) {
        this.startTime = data().deepCopy(fields()[5].schema(), other.startTime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.endTime)) {
        this.endTime = data().deepCopy(fields()[6].schema(), other.endTime);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder setType(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.type = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder clearType() {
      type = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'prodInstId' field.
      * @return The value.
      */
    public java.lang.CharSequence getProdInstId() {
      return prodInstId;
    }

    /**
      * Sets the value of the 'prodInstId' field.
      * @param value The value of 'prodInstId'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder setProdInstId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.prodInstId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'prodInstId' field has been set.
      * @return True if the 'prodInstId' field has been set, false otherwise.
      */
    public boolean hasProdInstId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'prodInstId' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder clearProdInstId() {
      prodInstId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataTotal' field.
      * @return The value.
      */
    public java.lang.CharSequence getDataTotal() {
      return dataTotal;
    }

    /**
      * Sets the value of the 'dataTotal' field.
      * @param value The value of 'dataTotal'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder setDataTotal(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dataTotal = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'dataTotal' field has been set.
      * @return True if the 'dataTotal' field has been set, false otherwise.
      */
    public boolean hasDataTotal() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'dataTotal' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder clearDataTotal() {
      dataTotal = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'dataAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getDataAmount() {
      return dataAmount;
    }

    /**
      * Sets the value of the 'dataAmount' field.
      * @param value The value of 'dataAmount'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder setDataAmount(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.dataAmount = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'dataAmount' field has been set.
      * @return True if the 'dataAmount' field has been set, false otherwise.
      */
    public boolean hasDataAmount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'dataAmount' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder clearDataAmount() {
      dataAmount = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'setAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getSetAmount() {
      return setAmount;
    }

    /**
      * Sets the value of the 'setAmount' field.
      * @param value The value of 'setAmount'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder setSetAmount(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.setAmount = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'setAmount' field has been set.
      * @return True if the 'setAmount' field has been set, false otherwise.
      */
    public boolean hasSetAmount() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'setAmount' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder clearSetAmount() {
      setAmount = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'startTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getStartTime() {
      return startTime;
    }

    /**
      * Sets the value of the 'startTime' field.
      * @param value The value of 'startTime'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder setStartTime(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.startTime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'startTime' field has been set.
      * @return True if the 'startTime' field has been set, false otherwise.
      */
    public boolean hasStartTime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'startTime' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder clearStartTime() {
      startTime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'endTime' field.
      * @return The value.
      */
    public java.lang.CharSequence getEndTime() {
      return endTime;
    }

    /**
      * Sets the value of the 'endTime' field.
      * @param value The value of 'endTime'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder setEndTime(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.endTime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'endTime' field has been set.
      * @return True if the 'endTime' field has been set, false otherwise.
      */
    public boolean hasEndTime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'endTime' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftDataAmount.Builder clearEndTime() {
      endTime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    public LeftDataAmount build() {
      try {
        LeftDataAmount record = new LeftDataAmount();
        record.type = fieldSetFlags()[0] ? this.type : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.prodInstId = fieldSetFlags()[1] ? this.prodInstId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dataTotal = fieldSetFlags()[2] ? this.dataTotal : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.dataAmount = fieldSetFlags()[3] ? this.dataAmount : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.setAmount = fieldSetFlags()[4] ? this.setAmount : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.startTime = fieldSetFlags()[5] ? this.startTime : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.endTime = fieldSetFlags()[6] ? this.endTime : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
