/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.code.rpc.api.sync;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** 查询账户余量信息：请求：属性 */
@org.apache.avro.specific.AvroGenerated
public class LeftQueryRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 1430605497914707987L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LeftQueryRequest\",\"namespace\":\"com.code.rpc.api.sync\",\"doc\":\"查询账户余量信息：请求：属性\",\"fields\":[{\"name\":\"oprCode\",\"type\":\"string\"},{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"type\",\"type\":[\"null\",\"string\"]},{\"name\":\"queryMonth\",\"type\":[\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence oprCode;
  @Deprecated public java.lang.CharSequence phone;
  @Deprecated public java.lang.CharSequence type;
  @Deprecated public java.lang.Object queryMonth;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LeftQueryRequest() {}

  /**
   * All-args constructor.
   * @param oprCode The new value for oprCode
   * @param phone The new value for phone
   * @param type The new value for type
   * @param queryMonth The new value for queryMonth
   */
  public LeftQueryRequest(java.lang.CharSequence oprCode, java.lang.CharSequence phone, java.lang.CharSequence type, java.lang.Object queryMonth) {
    this.oprCode = oprCode;
    this.phone = phone;
    this.type = type;
    this.queryMonth = queryMonth;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return oprCode;
    case 1: return phone;
    case 2: return type;
    case 3: return queryMonth;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: oprCode = (java.lang.CharSequence)value$; break;
    case 1: phone = (java.lang.CharSequence)value$; break;
    case 2: type = (java.lang.CharSequence)value$; break;
    case 3: queryMonth = (java.lang.Object)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'oprCode' field.
   * @return The value of the 'oprCode' field.
   */
  public java.lang.CharSequence getOprCode() {
    return oprCode;
  }

  /**
   * Sets the value of the 'oprCode' field.
   * @param value the value to set.
   */
  public void setOprCode(java.lang.CharSequence value) {
    this.oprCode = value;
  }

  /**
   * Gets the value of the 'phone' field.
   * @return The value of the 'phone' field.
   */
  public java.lang.CharSequence getPhone() {
    return phone;
  }

  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(java.lang.CharSequence value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public java.lang.CharSequence getType() {
    return type;
  }

  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(java.lang.CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'queryMonth' field.
   * @return The value of the 'queryMonth' field.
   */
  public java.lang.Object getQueryMonth() {
    return queryMonth;
  }

  /**
   * Sets the value of the 'queryMonth' field.
   * @param value the value to set.
   */
  public void setQueryMonth(java.lang.Object value) {
    this.queryMonth = value;
  }

  /**
   * Creates a new LeftQueryRequest RecordBuilder.
   * @return A new LeftQueryRequest RecordBuilder
   */
  public static com.code.rpc.api.sync.LeftQueryRequest.Builder newBuilder() {
    return new com.code.rpc.api.sync.LeftQueryRequest.Builder();
  }

  /**
   * Creates a new LeftQueryRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LeftQueryRequest RecordBuilder
   */
  public static com.code.rpc.api.sync.LeftQueryRequest.Builder newBuilder(com.code.rpc.api.sync.LeftQueryRequest.Builder other) {
    return new com.code.rpc.api.sync.LeftQueryRequest.Builder(other);
  }

  /**
   * Creates a new LeftQueryRequest RecordBuilder by copying an existing LeftQueryRequest instance.
   * @param other The existing instance to copy.
   * @return A new LeftQueryRequest RecordBuilder
   */
  public static com.code.rpc.api.sync.LeftQueryRequest.Builder newBuilder(com.code.rpc.api.sync.LeftQueryRequest other) {
    return new com.code.rpc.api.sync.LeftQueryRequest.Builder(other);
  }

  /**
   * RecordBuilder for LeftQueryRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LeftQueryRequest>
    implements org.apache.avro.data.RecordBuilder<LeftQueryRequest> {

    private java.lang.CharSequence oprCode;
    private java.lang.CharSequence phone;
    private java.lang.CharSequence type;
    private java.lang.Object queryMonth;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.code.rpc.api.sync.LeftQueryRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.oprCode)) {
        this.oprCode = data().deepCopy(fields()[0].schema(), other.oprCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phone)) {
        this.phone = data().deepCopy(fields()[1].schema(), other.phone);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.queryMonth)) {
        this.queryMonth = data().deepCopy(fields()[3].schema(), other.queryMonth);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LeftQueryRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(com.code.rpc.api.sync.LeftQueryRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.oprCode)) {
        this.oprCode = data().deepCopy(fields()[0].schema(), other.oprCode);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.phone)) {
        this.phone = data().deepCopy(fields()[1].schema(), other.phone);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.type)) {
        this.type = data().deepCopy(fields()[2].schema(), other.type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.queryMonth)) {
        this.queryMonth = data().deepCopy(fields()[3].schema(), other.queryMonth);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'oprCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getOprCode() {
      return oprCode;
    }

    /**
      * Sets the value of the 'oprCode' field.
      * @param value The value of 'oprCode'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftQueryRequest.Builder setOprCode(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.oprCode = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'oprCode' field has been set.
      * @return True if the 'oprCode' field has been set, false otherwise.
      */
    public boolean hasOprCode() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'oprCode' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftQueryRequest.Builder clearOprCode() {
      oprCode = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'phone' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhone() {
      return phone;
    }

    /**
      * Sets the value of the 'phone' field.
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftQueryRequest.Builder setPhone(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.phone = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'phone' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftQueryRequest.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public java.lang.CharSequence getType() {
      return type;
    }

    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftQueryRequest.Builder setType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftQueryRequest.Builder clearType() {
      type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'queryMonth' field.
      * @return The value.
      */
    public java.lang.Object getQueryMonth() {
      return queryMonth;
    }

    /**
      * Sets the value of the 'queryMonth' field.
      * @param value The value of 'queryMonth'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftQueryRequest.Builder setQueryMonth(java.lang.Object value) {
      validate(fields()[3], value);
      this.queryMonth = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'queryMonth' field has been set.
      * @return True if the 'queryMonth' field has been set, false otherwise.
      */
    public boolean hasQueryMonth() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'queryMonth' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.LeftQueryRequest.Builder clearQueryMonth() {
      queryMonth = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    public LeftQueryRequest build() {
      try {
        LeftQueryRequest record = new LeftQueryRequest();
        record.oprCode = fieldSetFlags()[0] ? this.oprCode : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.phone = fieldSetFlags()[1] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.type = fieldSetFlags()[2] ? this.type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.queryMonth = fieldSetFlags()[3] ? this.queryMonth : (java.lang.Object) defaultValue(fields()[3]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
