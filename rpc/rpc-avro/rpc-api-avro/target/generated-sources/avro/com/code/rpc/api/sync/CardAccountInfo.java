/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.code.rpc.api.sync;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** 查询余量信息应答-属性 */
@org.apache.avro.specific.AvroGenerated
public class CardAccountInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8719954711956030620L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"CardAccountInfo\",\"namespace\":\"com.code.rpc.api.sync\",\"doc\":\"查询余量信息应答-属性\",\"fields\":[{\"name\":\"phone\",\"type\":\"string\"},{\"name\":\"accountInfo\",\"type\":{\"type\":\"record\",\"name\":\"AccountInfo\",\"doc\":\"查询余量信息应答-属性-账户信息\",\"fields\":[{\"name\":\"accountStatus\",\"type\":\"string\"}]}},{\"name\":\"leftDataAmount\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LeftDataAmount\",\"doc\":\"查询余量信息应答-属性-流量信息\",\"fields\":[{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"prodInstId\",\"type\":\"string\"},{\"name\":\"dataTotal\",\"type\":\"string\"},{\"name\":\"dataAmount\",\"type\":\"string\"},{\"name\":\"setAmount\",\"type\":\"string\"},{\"name\":\"startTime\",\"type\":\"string\"},{\"name\":\"endTime\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence phone;
  @Deprecated public com.code.rpc.api.sync.AccountInfo accountInfo;
  @Deprecated public java.util.List<com.code.rpc.api.sync.LeftDataAmount> leftDataAmount;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public CardAccountInfo() {}

  /**
   * All-args constructor.
   * @param phone The new value for phone
   * @param accountInfo The new value for accountInfo
   * @param leftDataAmount The new value for leftDataAmount
   */
  public CardAccountInfo(java.lang.CharSequence phone, com.code.rpc.api.sync.AccountInfo accountInfo, java.util.List<com.code.rpc.api.sync.LeftDataAmount> leftDataAmount) {
    this.phone = phone;
    this.accountInfo = accountInfo;
    this.leftDataAmount = leftDataAmount;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return phone;
    case 1: return accountInfo;
    case 2: return leftDataAmount;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: phone = (java.lang.CharSequence)value$; break;
    case 1: accountInfo = (com.code.rpc.api.sync.AccountInfo)value$; break;
    case 2: leftDataAmount = (java.util.List<com.code.rpc.api.sync.LeftDataAmount>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'phone' field.
   * @return The value of the 'phone' field.
   */
  public java.lang.CharSequence getPhone() {
    return phone;
  }

  /**
   * Sets the value of the 'phone' field.
   * @param value the value to set.
   */
  public void setPhone(java.lang.CharSequence value) {
    this.phone = value;
  }

  /**
   * Gets the value of the 'accountInfo' field.
   * @return The value of the 'accountInfo' field.
   */
  public com.code.rpc.api.sync.AccountInfo getAccountInfo() {
    return accountInfo;
  }

  /**
   * Sets the value of the 'accountInfo' field.
   * @param value the value to set.
   */
  public void setAccountInfo(com.code.rpc.api.sync.AccountInfo value) {
    this.accountInfo = value;
  }

  /**
   * Gets the value of the 'leftDataAmount' field.
   * @return The value of the 'leftDataAmount' field.
   */
  public java.util.List<com.code.rpc.api.sync.LeftDataAmount> getLeftDataAmount() {
    return leftDataAmount;
  }

  /**
   * Sets the value of the 'leftDataAmount' field.
   * @param value the value to set.
   */
  public void setLeftDataAmount(java.util.List<com.code.rpc.api.sync.LeftDataAmount> value) {
    this.leftDataAmount = value;
  }

  /**
   * Creates a new CardAccountInfo RecordBuilder.
   * @return A new CardAccountInfo RecordBuilder
   */
  public static com.code.rpc.api.sync.CardAccountInfo.Builder newBuilder() {
    return new com.code.rpc.api.sync.CardAccountInfo.Builder();
  }

  /**
   * Creates a new CardAccountInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new CardAccountInfo RecordBuilder
   */
  public static com.code.rpc.api.sync.CardAccountInfo.Builder newBuilder(com.code.rpc.api.sync.CardAccountInfo.Builder other) {
    return new com.code.rpc.api.sync.CardAccountInfo.Builder(other);
  }

  /**
   * Creates a new CardAccountInfo RecordBuilder by copying an existing CardAccountInfo instance.
   * @param other The existing instance to copy.
   * @return A new CardAccountInfo RecordBuilder
   */
  public static com.code.rpc.api.sync.CardAccountInfo.Builder newBuilder(com.code.rpc.api.sync.CardAccountInfo other) {
    return new com.code.rpc.api.sync.CardAccountInfo.Builder(other);
  }

  /**
   * RecordBuilder for CardAccountInfo instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<CardAccountInfo>
    implements org.apache.avro.data.RecordBuilder<CardAccountInfo> {

    private java.lang.CharSequence phone;
    private com.code.rpc.api.sync.AccountInfo accountInfo;
    private com.code.rpc.api.sync.AccountInfo.Builder accountInfoBuilder;
    private java.util.List<com.code.rpc.api.sync.LeftDataAmount> leftDataAmount;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.code.rpc.api.sync.CardAccountInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.phone)) {
        this.phone = data().deepCopy(fields()[0].schema(), other.phone);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountInfo)) {
        this.accountInfo = data().deepCopy(fields()[1].schema(), other.accountInfo);
        fieldSetFlags()[1] = true;
      }
      if (other.hasAccountInfoBuilder()) {
        this.accountInfoBuilder = com.code.rpc.api.sync.AccountInfo.newBuilder(other.getAccountInfoBuilder());
      }
      if (isValidValue(fields()[2], other.leftDataAmount)) {
        this.leftDataAmount = data().deepCopy(fields()[2].schema(), other.leftDataAmount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing CardAccountInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.code.rpc.api.sync.CardAccountInfo other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.phone)) {
        this.phone = data().deepCopy(fields()[0].schema(), other.phone);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.accountInfo)) {
        this.accountInfo = data().deepCopy(fields()[1].schema(), other.accountInfo);
        fieldSetFlags()[1] = true;
      }
      this.accountInfoBuilder = null;
      if (isValidValue(fields()[2], other.leftDataAmount)) {
        this.leftDataAmount = data().deepCopy(fields()[2].schema(), other.leftDataAmount);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'phone' field.
      * @return The value.
      */
    public java.lang.CharSequence getPhone() {
      return phone;
    }

    /**
      * Sets the value of the 'phone' field.
      * @param value The value of 'phone'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.CardAccountInfo.Builder setPhone(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.phone = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'phone' field has been set.
      * @return True if the 'phone' field has been set, false otherwise.
      */
    public boolean hasPhone() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'phone' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.CardAccountInfo.Builder clearPhone() {
      phone = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'accountInfo' field.
      * @return The value.
      */
    public com.code.rpc.api.sync.AccountInfo getAccountInfo() {
      return accountInfo;
    }

    /**
      * Sets the value of the 'accountInfo' field.
      * @param value The value of 'accountInfo'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.CardAccountInfo.Builder setAccountInfo(com.code.rpc.api.sync.AccountInfo value) {
      validate(fields()[1], value);
      this.accountInfoBuilder = null;
      this.accountInfo = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'accountInfo' field has been set.
      * @return True if the 'accountInfo' field has been set, false otherwise.
      */
    public boolean hasAccountInfo() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'accountInfo' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public com.code.rpc.api.sync.AccountInfo.Builder getAccountInfoBuilder() {
      if (accountInfoBuilder == null) {
        if (hasAccountInfo()) {
          setAccountInfoBuilder(com.code.rpc.api.sync.AccountInfo.newBuilder(accountInfo));
        } else {
          setAccountInfoBuilder(com.code.rpc.api.sync.AccountInfo.newBuilder());
        }
      }
      return accountInfoBuilder;
    }

    /**
     * Sets the Builder instance for the 'accountInfo' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public com.code.rpc.api.sync.CardAccountInfo.Builder setAccountInfoBuilder(com.code.rpc.api.sync.AccountInfo.Builder value) {
      clearAccountInfo();
      accountInfoBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'accountInfo' field has an active Builder instance
     * @return True if the 'accountInfo' field has an active Builder instance
     */
    public boolean hasAccountInfoBuilder() {
      return accountInfoBuilder != null;
    }

    /**
      * Clears the value of the 'accountInfo' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.CardAccountInfo.Builder clearAccountInfo() {
      accountInfo = null;
      accountInfoBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'leftDataAmount' field.
      * @return The value.
      */
    public java.util.List<com.code.rpc.api.sync.LeftDataAmount> getLeftDataAmount() {
      return leftDataAmount;
    }

    /**
      * Sets the value of the 'leftDataAmount' field.
      * @param value The value of 'leftDataAmount'.
      * @return This builder.
      */
    public com.code.rpc.api.sync.CardAccountInfo.Builder setLeftDataAmount(java.util.List<com.code.rpc.api.sync.LeftDataAmount> value) {
      validate(fields()[2], value);
      this.leftDataAmount = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'leftDataAmount' field has been set.
      * @return True if the 'leftDataAmount' field has been set, false otherwise.
      */
    public boolean hasLeftDataAmount() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'leftDataAmount' field.
      * @return This builder.
      */
    public com.code.rpc.api.sync.CardAccountInfo.Builder clearLeftDataAmount() {
      leftDataAmount = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public CardAccountInfo build() {
      try {
        CardAccountInfo record = new CardAccountInfo();
        record.phone = fieldSetFlags()[0] ? this.phone : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (accountInfoBuilder != null) {
          record.accountInfo = this.accountInfoBuilder.build();
        } else {
          record.accountInfo = fieldSetFlags()[1] ? this.accountInfo : (com.code.rpc.api.sync.AccountInfo) defaultValue(fields()[1]);
        }
        record.leftDataAmount = fieldSetFlags()[2] ? this.leftDataAmount : (java.util.List<com.code.rpc.api.sync.LeftDataAmount>) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
